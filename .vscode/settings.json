{
    "files.associations": {
        "*.GLSL": "shaderlab",
        "iostream": "cpp",
        "array": "c",
        "atomic": "c",
        "hash_map": "c",
        "bit": "c",
        "*.tcc": "c",
        "cctype": "c",
        "chrono": "c",
        "cinttypes": "c",
        "clocale": "c",
        "cmath": "c",
        "compare": "c",
        "concepts": "c",
        "condition_variable": "c",
        "cstdarg": "c",
        "cstddef": "c",
        "cstdint": "c",
        "cstdio": "c",
        "cstdlib": "c",
        "cstring": "c",
        "ctime": "c",
        "cwchar": "c",
        "cwctype": "c",
        "forward_list": "c",
        "list": "c",
        "map": "c",
        "set": "c",
        "unordered_map": "c",
        "unordered_set": "c",
        "vector": "c",
        "exception": "c",
        "algorithm": "c",
        "functional": "c",
        "iterator": "c",
        "memory": "c",
        "memory_resource": "c",
        "numeric": "c",
        "optional": "c",
        "random": "c",
        "ratio": "c",
        "string": "c",
        "string_view": "c",
        "system_error": "c",
        "tuple": "c",
        "type_traits": "c",
        "utility": "c",
        "fstream": "c",
        "initializer_list": "c",
        "iomanip": "c",
        "iosfwd": "c",
        "istream": "c",
        "limits": "c",
        "mutex": "c",
        "new": "c",
        "ostream": "c",
        "ranges": "c",
        "sstream": "c",
        "stdexcept": "c",
        "stop_token": "c",
        "streambuf": "c",
        "thread": "c",
        "typeindex": "c",
        "typeinfo": "c",
        "variant": "c",
        "hash_set": "cpp",
        "codecvt": "cpp",
        "complex": "cpp",
        "csignal": "cpp",
        "deque": "cpp",
        "source_location": "cpp",
        "future": "cpp",
        "valarray": "cpp",
        "window.h": "c",
        "events.h": "c",
        "linuxwindow.h": "c",
        "entity.h": "c",
        "core.h": "c",
        "event.h": "c",
        "linuxinput.h": "c",
        "bitset": "cpp",
        "corewindow.h": "c",
        "indexbuffermanger.h": "c",
        "vertexbuffer.h": "c",
        "vertexbuffermanger.h": "c",
        "shader.h": "c",
        "vertexarraymanger.h": "c",
        "renderapi.h": "c",
        "glm.hpp": "c",
        "renderer.h": "c",
        "vertexarray.h": "c",
        "shadermanger.h": "c",
        "corecamera.h": "c",
        "numbers": "cpp",
        "semaphore": "cpp",
        "any": "cpp",
        "*.ipp": "cpp",
        "coroutine": "cpp",
        "corecameracontroler.h": "c",
        "windowresizedata.h": "c",
        "mouseclickdata.h": "c",
        "keytypeddata.h": "c",
        "mousescrolldata.h": "c",
        "onupdatedata.h": "c",
        "coreinput.h": "c",
        "corewindowfactory.h": "c",
        "graphicscontext.h": "c",
        "scene.h": "c",
        "material.h": "c",
        "mousemoveeventdata.h": "c",
        "coreeventdata.h": "c",
        "keydata.h": "c",
        "mesh.h": "c",
        "matrix_transform.hpp": "c",
        "transform.h": "c",
        "slist": "cpp",
        "cfenv": "cpp",
        "collidersystem2d.h": "c",
        "squrecollider.h": "c",
        "component.h": "c",
        "logger.h": "c",
        "meshabsrtactfactory.h": "c",
        "filesystem": "cpp",
        "*.def": "cpp",
        "*.inc": "cpp",
        "assetmanager.h": "c",
        "strstream": "cpp",
        "span": "cpp",
        "charconv": "cpp",
        "regex": "cpp",
        "shared_mutex": "cpp",
        "cerrno": "cpp",
        "queue": "cpp",
        "format": "cpp",
        "stdfloat": "cpp"
    },
    "files.exclude": {
        ".gitignore": true,
        ".gitmodules": true,
        ".vscode/": true,
        "build/": true,
        "config/": true,
        "doc/": true,
        "imgui.ini": true,
        "install.sh": true,
        "libs/": true,
        "LICENSE": true,
        "logs": true,
        "output/": true,
        "push.sh": true,
        "README.md": true,
        "run.sh": true,
        "submodules/": true,
        "test.sh": true,
        "trace**": true,
        "vendor/": true
    },
    "C_Cpp.errorSquiggles": "disabled",
    "editor.tokenColorCustomizations": {
        "textMateRules": [
            {
                "scope": "googletest.failed",
                "settings": {
                    "foreground": "#f00"
                }
            },
            {
                "scope": "googletest.passed",
                "settings": {
                    "foreground": "#0f0"
                }
            },
            {
                "scope": "googletest.run",
                "settings": {
                    "foreground": "#0f0"
                }
            }
        ]
    },
    "gtest-adapter.debugConfig": "debug tests",
    "gtest-adapter.supportLocation": true,
    "cpp-class-helper.srcFolderPath": "/home/itailupo/Documents/programing projects/cpp/good-question-TBD/src",
    "cpp-class-helper.includeFolderPath": "/home/itailupo/Documents/programing projects/cpp/good-question-TBD/include",
    "makefile.launchConfigurations": [
        {
            "cwd": "/home/itailupo/Documents/programing projects/cpp/Laughtale-game-engine/output",
            "binaryPath": "/home/itailupo/Documents/programing projects/cpp/Laughtale-game-engine/output/LTE_Editor.out",
            "binaryArgs": []
        }
    ],
    "cpp-class-helper.headerFileDefaultValue": "#pragma once\n\nclass ${class_name}\n{\n\tpublic:\n\t\t${class_name}();\n\t\t${class_name}(const ${class_name}&) = default;\n\t\t${class_name}(${class_name}&&) = default;\n\t\t${class_name}& operator=(const ${class_name}&);\n\t\t${class_name}& operator=(${class_name}&&);\n\n\t\t~${class_name}();\n};\n",
    "cpp-class-helper.sourceFileDefaultValue": "#include \"${class_name}.hpp\"\n\n${class_name}::${class_name}()\n{\n\t\n}\n\t\n${class_name}::~${class_name}()\n{\n\n}\n",
    "CppHelper.SourcePattern": [
        "{FILE}.cpp",
        "{FILE}.c",
        "{FILE}.inl",
        "/src/*/{FILE}.cpp"
    ],
    "C_Cpp.codeAnalysis.clangTidy.checks.disabled": [
        "clang-diagnostic-error",
        "clang-diagnostic-pragma-once-outside-header",
        "clang-diagnostic-error"
    ],
}